
package it.water.documents.manager.service.rest;

import it.water.core.api.model.PaginableResult;
import it.water.core.api.service.BaseEntityApi;
import it.water.core.api.service.rest.FrameworkRestController;
import it.water.core.interceptors.annotations.Inject;
import it.water.documents.manager.api.DocumentApi;
import it.water.documents.manager.api.FolderApi;
import it.water.documents.manager.api.rest.DocumentsManagerRestApi;
import it.water.documents.manager.model.Document;
import it.water.documents.manager.model.Folder;
import it.water.service.rest.persistence.BaseEntityRestApi;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.core.Response;
import java.io.InputStream;


/**
 * @Generated by Water Generator
 * Rest Api Class for DocumentsManager entity.
 */
@FrameworkRestController(referredRestApi = DocumentsManagerRestApi.class)
public class DocumentControllerImpl extends BaseEntityRestApi<Document> implements DocumentsManagerRestApi {
    @SuppressWarnings({ "java:S1068", "unused" }) //still mantain the variable even if not used
    private static Logger log = LoggerFactory.getLogger(DocumentControllerImpl.class.getName());

    @Inject
    @Setter
    private DocumentApi documentApi;

    @Inject
    @Setter
    private FolderApi folderApi;


    @Override
    protected BaseEntityApi<Document> getEntityService() {
        return documentApi;
    }

    @Override
    public Document save(Document entity, InputStream file) {
        fillEntityWithDocumentContent(entity, file);
        return super.save(entity);
    }

    @Override
    public Document update(Document entity, InputStream file) {
        fillEntityWithDocumentContent(entity, file);
        return super.update(entity);
    }

    @Override
    public Object fetchContent(String path, String fileName) {
        return prepareDownload(documentApi.fetchDocumentContentByPath(path, fileName));
    }

    @Override
    public Object fetchContent(long documentId) {
        return prepareDownload(documentApi.fetchDocumentContent(documentId));
    }

    @Override
    public Object fetchContent(String documentUID) {
        return prepareDownload(documentApi.fetchDocumentContentByUID(documentUID));
    }

    @Override
    public Folder saveFolder(Folder folder) {
        return folderApi.save(folder);
    }

    @Override
    public Folder updateFolder(Folder folder) {
        return folderApi.update(folder);
    }

    @Override
    public Folder findFolder(long id) {
        return folderApi.find(id);
    }

    @Override
    public PaginableResult<Folder> findAllFolders() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void removeFolder(long id) {
        folderApi.remove(id);
    }

    private void fillEntityWithDocumentContent(Document document, InputStream inputStream) {
        if (inputStream != null) {
            document.setDocumentContentInputStream(inputStream);
        }
    }

    /**
     * This method can be overridden in order to support specific download logic default is jaxrs
     * @param document
     * @return
     */
    protected Object prepareDownload(Document document) {
        InputStream inputStream = document.getDocumentContentInputStream();
        return Response.ok(inputStream)
                .header("Content-Disposition", "attachment; filename=\"" + document.getFileName() + "\"")
                .header("Content-Type", document.getContentType())
                .build();
    }
}
