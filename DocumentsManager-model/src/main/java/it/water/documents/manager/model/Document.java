package it.water.documents.manager.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonView;
import it.water.core.api.entity.shared.SharedEntity;
import it.water.core.api.permission.ProtectedEntity;
import it.water.core.api.service.rest.WaterJsonView;
import it.water.core.permission.action.CrudActions;
import it.water.core.permission.annotations.AccessControl;
import it.water.core.permission.annotations.DefaultRoleAccess;
import it.water.core.validation.annotations.NoMalitiusCode;
import it.water.core.validation.annotations.NotNullOnPersist;
import it.water.repository.jpa.model.AbstractJpaEntity;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.io.InputStream;


/**
 * @Generated by Water Generator
 * Document Entity Class.
 */
//JPA
@Entity
@Table(uniqueConstraints = {@UniqueConstraint(columnNames = {"path", "fileName"})})
@Access(AccessType.FIELD)
//Lombok
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@RequiredArgsConstructor
@Getter
@Setter(AccessLevel.PROTECTED)
@ToString
@EqualsAndHashCode(of = {"id", "path", "filename"})
//Actions and default roles access
@AccessControl(availableActions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.REMOVE},
        rolesPermissions = {
                //Admin role can do everything
                @DefaultRoleAccess(roleName = Document.DEFAULT_MANAGER_ROLE, actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.REMOVE}),
                //Viwer has read only access
                @DefaultRoleAccess(roleName = Document.DEFAULT_VIEWER_ROLE, actions = {CrudActions.FIND, CrudActions.FIND_ALL}),
                //Editor can do anything but remove
                @DefaultRoleAccess(roleName = Document.DEFAULT_EDITOR_ROLE, actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL})
        })
public class Document extends AbstractJpaEntity implements ProtectedEntity, SharedEntity {

    public static final String DEFAULT_MANAGER_ROLE = "documentsManager";
    public static final String DEFAULT_VIEWER_ROLE = "documentsViewer";
    public static final String DEFAULT_EDITOR_ROLE = "documentsEditor";
    public static final String DOCUMENT_CONTENT_HTTP_PART_NAME = "documentContent";
    public static final String DOCUMENT_ENTITY_HTTP_PART_NAME = "data";

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @JsonView(WaterJsonView.Extended.class)
    private String path;

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String fileName;

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String uid;

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String contentType;

    //Owner user id of the entity
    @Setter
    @NonNull
    @JsonIgnore
    private Long ownerUserId;

    @Setter
    @Getter
    @Transient
    @JsonIgnore
    private InputStream documentContentInputStream;

    @SuppressWarnings("java:S2637")
    public void setPath(String path) {
        if (path != null && path.endsWith("/"))
            path = path.substring(0, path.length() - 1);
        this.path = path;
    }

    @Transient
    @JsonIgnore
    public String getFullPath() {
        return this.path + "/" + this.fileName;
    }
}