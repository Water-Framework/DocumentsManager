package it.water.documents.manager.model;


import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonView;
import it.water.core.api.entity.owned.OwnedChildResource;
import it.water.core.api.entity.shared.SharedEntity;
import it.water.core.api.permission.ProtectedEntity;
import it.water.core.api.service.rest.WaterJsonView;
import it.water.core.permission.action.CrudActions;
import it.water.core.permission.annotations.AccessControl;
import it.water.core.permission.annotations.DefaultRoleAccess;
import it.water.core.validation.annotations.NoMalitiusCode;
import it.water.core.validation.annotations.NotNullOnPersist;
import it.water.repository.jpa.model.AbstractJpaEntity;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

/**
 * @Generated by Water Generator
 * Folder Entity Class.
 */
//JPA
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"path","name"})) //example of unique constraint
@Access(AccessType.FIELD)
//Lombok
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@RequiredArgsConstructor
@Getter
@Setter(AccessLevel.PROTECTED)
@ToString
@EqualsAndHashCode(of = {"id", "path","name"})
//Actions and default roles access
@AccessControl(availableActions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.REMOVE},
        rolesPermissions = {
                //Admin role can do everything
                @DefaultRoleAccess(roleName = Folder.DEFAULT_MANAGER_ROLE, actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.REMOVE}),
                //Viwer has read only access
                @DefaultRoleAccess(roleName = Folder.DEFAULT_VIEWER_ROLE, actions = {CrudActions.FIND, CrudActions.FIND_ALL}),
                //Editor can do anything but remove
                @DefaultRoleAccess(roleName = Folder.DEFAULT_EDITOR_ROLE, actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.FIND_ALL})
        })
public class Folder extends AbstractJpaEntity implements ProtectedEntity, SharedEntity, OwnedChildResource {

    public static final String DEFAULT_MANAGER_ROLE = "foldersManager";
    public static final String DEFAULT_VIEWER_ROLE = "foldersViewer";
    public static final String DEFAULT_EDITOR_ROLE = "foldersEditor";

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String path;

    @NoMalitiusCode
    @NotNull
    @NotNullOnPersist
    @NonNull
    @Setter
    @JsonView(WaterJsonView.Extended.class)
    private String name;

    //Owner user id of the entity
    @Setter
    @NonNull
    @JsonIgnore
    private Long ownerUserId;

    @Setter
    @Getter
    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JsonIgnore
    private Folder parent;

    @Setter
    @Getter
    @OneToMany(mappedBy = "parent")
    @JsonIgnore
    private Set<Folder> children = new HashSet<>();

    @Transient
    @JsonIgnore
    public String getFullPath() {
        return this.path + "/" + this.name;
    }
}