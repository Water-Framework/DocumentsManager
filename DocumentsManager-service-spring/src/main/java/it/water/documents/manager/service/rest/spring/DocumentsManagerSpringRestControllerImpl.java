package it.water.documents.manager.service.rest.spring;

import it.water.core.api.model.PaginableResult;
import it.water.core.api.repository.query.Query;
import it.water.core.api.repository.query.QueryOrder;
import it.water.core.model.exceptions.WaterRuntimeException;
import it.water.documents.manager.api.DocumentApi;
import it.water.documents.manager.model.Document;
import it.water.documents.manager.model.Folder;
import it.water.documents.manager.service.rest.DocumentControllerImpl;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


/**
 * @Generated by Water Generator
 * Rest Api Class for DocumentsManager entity. It just overrides method invoking super in order to let spring find web methods.
 */
@RestController
public class DocumentsManagerSpringRestControllerImpl extends DocumentControllerImpl implements DocumentsManagerSpringRestApi {
    private static Logger logger = LoggerFactory.getLogger(DocumentsManagerSpringRestControllerImpl.class);
    @Autowired
    private HttpServletResponse httpServletResponse;

    @Override
    public Document save(Document document, MultipartFile multipartFile) {
        try {
            InputStream inputStream = null;
            if (multipartFile != null) {
                inputStream = multipartFile.getInputStream();
            }
            return save(document, inputStream);
        } catch (IOException e) {
            throw new WaterRuntimeException(e.getMessage(), e);
        }
    }

    @Override
    public Document save(Document entity, InputStream file) {
        return super.save(entity, file);
    }

    @Override
    public Document update(Document document, MultipartFile multipartFile) {
        try {
            InputStream inputStream = null;
            if (multipartFile != null) {
                inputStream = multipartFile.getInputStream();
            }
            return update(document, inputStream);
        } catch (Exception e) {
            throw new WaterRuntimeException(e.getMessage(), e);
        }
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public Document update(Document entity, InputStream file) {
        return super.update(entity);
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public void remove(long id) {
        super.remove(id);
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public Document find(long id) {
        return super.find(id);
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public PaginableResult<Document> findAll(Integer delta, Integer page, Query filter, QueryOrder order) {
        return super.findAll(delta, page, filter, order);
    }

    @Override
    public Object fetchContent(String path, String fileName) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Object fetchContent(long documentId) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Object fetchContent(String documentUID) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void fetchContentStream(String path, String fileName) {
        streamDownload(getDocumentApi().fetchDocumentContentByPath(path, fileName));
    }

    @Override
    public void fetchContentStream(long documentId) {
        streamDownload(getDocumentApi().fetchDocumentContent(documentId));
    }

    @Override
    public void fetchContentStream(String documentUID) {
        streamDownload(getDocumentApi().fetchDocumentContentByUID(documentUID));
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public PaginableResult<Document> findAll() {
        return super.findAll();
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public Folder saveFolder(Folder folder) {
        return super.saveFolder(folder);
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public Folder updateFolder(Folder folder) {
        return super.updateFolder(folder);
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public Folder findFolder(long id) {
        return super.findFolder(id);
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public PaginableResult<Folder> findAllFolders() {
        return super.findAllFolders();
    }

    @Override
    @SuppressWarnings("java:S1185") //disabling sonar because spring needs to override this method
    public void removeFolder(long id) {
        super.removeFolder(id);
    }

    /**
     * We override the logic of spring supporting document download
     *
     * @param document
     * @return
     */

    protected void streamDownload(Document document) {
        InputStream inputStream = document.getDocumentContentInputStream();
        try (OutputStream outputStream = httpServletResponse.getOutputStream()) {
            httpServletResponse.setContentType(document.getContentType());
            httpServletResponse.setHeader("Content-Disposition", "attachment; filename=\"" + document.getFileName() + "\"");
            byte[] buffer = new byte[8192];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
            outputStream.flush();
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
        }
    }

    private DocumentApi getDocumentApi() {
        return (DocumentApi) this.getEntityService();
    }
}
